.classpath
.project
.settings
bin/

VirtualPetShelter Test


VirtualPetShelter virtualPetShelter;
	Dog lucky;
	Cat sadie;
	RoboDog bella;
	RoboCat charlie;
	
	@Before
	public void setUp() {
		virtualPetShelter = new VirtualPetShelter();
		lucky = new Dog("Lucky", 25, 25, 25, 25, 25, 25, "Organic Dog");
		sadie = new Cat("Sadie", 25, 25, 25, 25, 25, 25, "Organic Cat");
		bella = new RoboDog("Bella", 25, 25, 25, 25, "Robotic Dog");
		charlie = new RoboCat("Charlie", 25, 25, 25, 25, "Robotic Cat");
	}
	
	@Test
	public void shouldBeAbleToIntakeDogs() {
		virtualPetShelter.intake(lucky);
		Dog admitDog = virtualPetShelter.intake(lucky);
		assertThat(admitDog, is(lucky));
	}
	
	@Test
	public void shouldBeAbleToIntakeCats() {
		virtualPetShelter.intake(sadie);
		Cat admitCat = virtualPetShelter.intake(sadie);
		assertThat(admitCat, is(sadie));
	}
	
	@Test
	public void shouldBeAbleToIntakeRoboDogs() {
		virtualPetShelter.intake(bella);
		RoboDog admitRoboDog = virtualPetShelter.intake(bella);
		assertThat(admitRoboDog, is(bella));
	}
	
	@Test
	public void shouldBeAbleToIntakeRoboCats() {
		virtualPetShelter.intake(charlie);
		RoboCat admitRoboCat = virtualPetShelter.intake(charlie);
		assertThat(admitRoboCat, is(charlie));
	}
	
	@Test
	public void shouldBeAbleToIntakeTwoDifferentTypesOfDogs() {
		virtualPetShelter.intake(lucky);
		virtualPetShelter.intake(bella);
		Dog admitDog = virtualPetShelter.intake(lucky);
		RoboDog admitRoboDog = virtualPetShelter.intake(bella);
		assertThat(admitDog, is(lucky));
		assertThat(admitRoboDog, is(bella));
	}
	
	@Test
	public void shouldBeAbleToAllowTheAdoptionOfADog() {
		
		virtualPetShelter.releaseDog(lucky);
		Dog adoptDog = virtualPetShelter.releaseDog(lucky);
		assertThat(adoptDog, is(lucky));
	}
	
	/*@Test
	public void shouldBeAbleToIntakeACollectionOfPets() {
		virtualPetShelter.intake(lucky);
		virtualPetShelter.intake(charlie);
		Collection<Pet>shelterPets = virtualPetShelter.getAllShelterPets();
		assertThat(shelterPets, containsInAnyOrder(charlie, lucky));
		
	}*/
	
	
	VirtualPetShelter Class

	Map<String, Pet> shelterPets = new HashMap<>();

	public void add(Pet intake) {
		shelterPets.put(intake.getName(), intake);
	}

	public Dog intake1(Pet dog) {
		return dog;
	}

	public Cat intake(Pet cat) {
		return sadie;

	}

	public RoboDog intake(Pet robodog) {

		return bella;
	}

	public RoboCat intake(Pet robocat) {
		return charlie;

	}

	public Dog releaseDog(Dog lucky) {
		return lucky;

	}
	
	public Collection<Pet> getAllShelterPets() {
		
		return shelterPets.values();
	}

	public void showAllShelterPets() {
		
		for(Pet shelterPet : shelterPets.values()) {
			
			System.out.println(shelterPet.getName());
	}


	VirtualPetShelterAMOKApp

		Pet dog = new Dog("Lucky", 25, 25, 25, 25,25,25,"Organic Dog");
		Pet cat = new Cat("Sadie", 25, 25, 25, 25, 25, 25, "Organic Cat");
		Pet robodog = new RoboDog("Bella", 25, 25, 25, 25, "Robotic Dog");
		Pet robocat = new RoboCat("Charlie", 25, 25, 25, 25, "Robotic Cat");
		
		virtualPetShelter.intake(dog);
		virtualPetShelter.intake(cat);
		virtualPetShelter.intake(robodog);
		virtualPetShelter.intake(robocat);
		
		Collection<Pet> shelterPets = virtualPetShelter.getAllShelterPets();
		
		
		System.out.println("Welcome to the Virtual Pet Shelter!");
		System.out.println("Where organic and robotic cats and dogs run AMOK!");
		System.out.println();
		System.out.println("The following pets are staying with us right now:");

		virtualPetShelter.showAllShelterPets();
}

	
System.out.println();
		System.out.println("This is their current status:");
		System.out.println();
		System.out.println("Name" + "\t" + "Hunger" + "\t" + "Thirst" + "\t" + "Boredom");
		String divider = "-------------------------------";
		System.out.println(divider);
		for (VirtualPet current : myVirtualPetShelter.getAllRescuedPets()) {
			System.out.println(current.getRescueName() + "\t" + " " + current.getHungerLevel() + "\t"
					+ current.getThirstLevel() + "\t" + current.getBoredomLevel());
		}	
	





	if (choice.equals("1")) {

				System.out.println("Welcome to iHeart Pets Virtual Pet Shelter Intake Center.");
				System.out.println("When Animal Control brings in stray without tags,");
				System.out.println("we give our visitors a name for recordkeeping purposes.");
				System.out.println();
				System.out.println("Choose a name for our new friend:");

				String newPetName = input.nextLine();

				System.out.println("Welcome, " + newPetName + "!");
				System.out.println();
				System.out.println("Is our new visitor Organic or Robotic : ");

				String newPetDescription = input.next();
				VirtualPet newShelterPet = new VirtualPet("Name: " + newPetName + " "+  "Description: " +newPetDescription);
				virtualPetShelter.add(newShelterPet);

				System.out.println(newPetName + ", hopefully your pet parents will come here to find you.");
				System.out.println("If not, we'll find another home for you.");
	
	


	// admit a pet
				virtualPetShelter.tickAllPets(pets);
				System.out.println("Do you have a: \n\tA. Organic Dog \n\t B. Organic Cat \n\t C. Robot Dog \n\t D. Robot Cat");
				String newPet = input.next();
				switch (newPet.toUpperCase()) {

				//Organic Dog	
				if(choice.equals ("A")){
					System.out.println("What will you name the new dog?");
					String newPetName = input.next();
					Pet newDog = new Dog(newPetName, 10, 10, 10, 10, 10, description);
					virtualPetShelter.addPet(newDog);
					}
				case "B"://ocat
					System.out.println("What will you name the new cat?");
					String oCatName = input.next();
					VirtualPet newOCat = new OrganicDog(oCatName, 10, 10, 10, 10, 10);
					myShelter.addPet(newOCat);
					break;
				case "C"://rcat
					System.out.println("What will you name the new dog?");
					String rDogName = input.next();
					VirtualPet newRDog = new OrganicDog(rDogName, 10, 10, 10, 10, 10);
					myShelter.addPet(newRDog);
					break;
				case "D":
					System.out.println("What will you name the new cat?");
					String rCatName = input.next();
					VirtualPet newRCat = new OrganicDog(rCatName, 10, 10, 10, 10, 10);
					myShelter.addPet(newRCat);
					break;
				}
				System.out.println("Welcome to your new home!" );




				you can iterate over just the organic pets like we did with the medical duties in the hospital project by using "instanceof"
for(Employee employee : employees.values()) {
            if (employee instanceof MedicalDuties) {
	

